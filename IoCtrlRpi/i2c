
#include "hw_iic.h"


#define BCM_BSC_C_OFFSET	0x00
#define BCM_BSC_S_OFFSET	0x04
#define BCM_BSC_DLEN_OFFSET	0x08
#define BCM_BSC_A_OFFSET	0x0C
#define BCM_BSC_FIFO_OFFSET	0x10
#define BCM_BSC_DIV_OFFSET	0x14
#define BCM_BSC_DEL_OFFSET	0x18
#define BCM_BSC_CLKT_OFFSET	0x1C

#define BCM_CORE_CLK_HZ 

//C Register
#define BCM_BSC_C_I2CEN		0x8000

#define BCM_BSC_C_ST		0X0080

//FIFO Register
#define BCM_BSC_CLEAN_FIFO	0X0020

//S Register
#define BCM_BSC_S_CLKT		0x0200
#define BCM_BSC_S_ERR		0x0100
#define BCM_BSC_S_TXD		0x0010



#define BCM_BSC_S_CLEAN_CLKT	0X0200
#define BCM_BSC_S_CLEAN_ERR	0X0100
#define BCM_BSC_S_CLEAN_DONE	0X0002

#define BCM_BSC_FIFO_DEPTH	16

volatile unsigned long *bcm_bsc1_base;

static int i2c_byte_wait_us = 0;

void bcm_i2c_init(void)
{

}
void bcm_i2c_uninit(void)
{

}
void bcm_i2c_begin(void)
{

}

void bcm_i2c_end(void)
{

}
/*
void bcm_WriteRegister(unsigned long * reg,unsigned int value)
{
	*reg = value;
}
unsigned int bcm_ReadRegister(unsigned long * reg)
{
	return *reg;
}
*/

void bcm_i2c_setSlaveAddress(unsigned char addr)
{
	volatile unsigned long* pAddr = bcm_bsc1_base + BCM_BSC_A_OFFSET;

	*pAddr = addr&0x7F;
}
void bcm_i2c_setClockDivider(unsigned int divider)
{
	volatile unsigned long* pAddr = bcm_bsc1_base + BCM_BSC_DIV_OFFSET;

	*pAddr = divider&0xFF;

	i2c_byte_wait_us = ((float)divider / BCM_CORE_CLK_HZ) *  1000000 * 9;
}

void bcm_i2c_setBaudRate(unsigned int baudrate)
{
	unsigned int divider;
	divider = (BCM2835_CORE_CLK_HZ / baudrate) & 0xFFFE;

	bcm_i2c_setClockDivider( (unsigned int)divider );
}
void bcm_i2c_clearFIFO(void)
{
	unsigned long* pAddr = bcm_bsc1_base +  BCM_BSC_C_OFFSET;

	*pAddr = BCM_BSC_CLEAN_FIFO;
}

void bcm_i2c_clearStatus(void)
{
	unsigned long pAddr = bcm_bsc1_base + BSM_BSC_S_OFFSET;

	*pAddr = BCM_BSC_S_CLEAN_CLKT | BCM_BSC_S_CLEAN_ERR | BCM_BSC_S_DONE;
}
void bcm_i2c_clearDONE(void)
{
	unsigned long pAddr = bcm_bsc1_base + BSM_BSC_S_OFFSET;

	*pAddr = *pAddr｜(*pAddr & BCM_BSC_S_DONE)；
}
void bcm_i2c_setDataLength(unsigned int len)
{
	unsigned long pAddr = bcm_bsc1_base + BCM_BSC_DLEN_OFFSET;

	*pAddr = len;
}
void bcm_i2c_writeFIFO(unsigned char data)
{
	unsigned long pAddr = bcm_bsc1_base + BCM_BSC_FIFO_OFFSET;

	*pAddr = data
}
void bcm_i2c_startTransfer(void)
{
	unsigned long pAddr = bcm_bsc1_base + BCM_BSC_C_OFFSET;

	*pAddr = BCM_BSC_C_I2CEN + BCM_BSC_C_ST;
}

unsigned int bcm_i2c_readStatus(void)
{
	unsigned int pAddr = bcm_bsc1_base + BCM_BSC_S_OFFSET;

	return *pAddr;
}
void bcm_i2c_write(const char * buf, unsigned int len)
{	
	unsigned int remaining = len;
	unsigned int i = 0;

	bcm_i2c_clearFIFO();
	bcm_i2c_clearStatus();
	bcm_i2c_setDataLength(len);
	
	while(remaining && (i < BCM_BSC_FIFO_DEPTH))
	{
		bcm_i2c_write(buf[i]);
		i++;
		remaining--;
	}
	
	bcm_i2c_startTransfer();

	while(!bcm_i2c_readStatus() & BCM_BSC_S_DONE)
	{
		while(remaining &&(bcm_i2c_readStatus() & BCM_BSC_S_TXD))
		{
			bcm_i2c_writeFIFO(buf[i]);
			i++;
			remaining--;
		}
	}
	
	if(bcm_i2c_readStatus() & BCM_BSC_S_ERR)
	{
		// Received a NACK
	}else if(bcm_i2c_readStatus() & BCM_BSC_S_CLKT)
	{
		//Received Clock Stretch Timeout
	}else if(remaining)
	{
		//not all data is sent
	}

	bcm_i2c_clearDONE();

}

void bcm_i2c_read(void)
{
	
}

